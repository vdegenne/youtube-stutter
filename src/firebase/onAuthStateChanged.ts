/**
 * !!!!!!!!!
 * DO NOT EDIT THIS FILE DIRECTLY,
 * FOR CENTRALIZED AND CUSTOMIZED CODE USE "./hooks.ts" INSTEAD !!
 * !!!!!!!!!
 *
 * Here's how you can use the promises of this module to control [dis]connection:
 *
 *```js
 * async functionThatRequiresConnectionAndAuthorization() {
 *   const {getOnAuthStateChangedCall, getOnAuthStateChangedComplete} =
 *     await import('../firebase/onAuthStateChanged.js');
 *   if ((await getOnAuthStateChangedCall()) === null) {
 *     // Not connected
 *     const {loginDialog} = await import('../login/login-dialog.js');
 *     loginDialog.show();
 *   } else {
 *     // To get a fully updated user controller
 *     const {isAuthorized, isNewUser} = await getOnAuthStateChangedComplete();
 *     if (isAuthorized) {
 *       if (isNewUser) { showWelcomeMessage(); }
 *       // do something
 *     }
 *   }
 * }
 * ```
 */
import './firebase.js'; // init script
import {getAuth, onAuthStateChanged} from 'firebase/auth';
import {
	userCtrl,
	type FirebaseUser,
	type UserController,
} from './UserController.js';
import {
	postWhenUserConnects,
	postWhenUserDisconnects,
	whenAuthStateChanges,
	whenUserConnects,
	whenUserDisconnects,
} from './hooks.js';

let onAuthStateChangedCall: Promise<FirebaseUser | null>;
let onAuthStateChangedComplete: Promise<UserController>;

export async function getOnAuthStateChangedCall() {
	await onAuthStateChangedFirstCall;
	return onAuthStateChangedCall;
}
export async function getOnAuthStateChangedComplete() {
	await getOnAuthStateChangedCall();
	return onAuthStateChangedComplete;
}

const onAuthStateChangedFirstCall = new Promise(
	(onAuthStateChangedFirstCallResolve) => {
		onAuthStateChanged(getAuth(), async (user: FirebaseUser | null) => {
			await whenAuthStateChanges(user);
			onAuthStateChangedCall = Promise.resolve(user);
			onAuthStateChangedFirstCallResolve(user);
			onAuthStateChangedComplete = new Promise(async (resolve) => {
				await userCtrl.updateComplete; // to make sure isNewUser is reflected

				if (user) {
					const jwt = await user.getIdTokenResult(true);
					await whenUserConnects(user, jwt);
				} else {
					await whenUserDisconnects();
				}

				await userCtrl.updateComplete;
				resolve(userCtrl);

				if (userCtrl.user) {
					await postWhenUserConnects();
				} else {
					await postWhenUserDisconnects();
				}
				// await userCtrl.updateComplete;
				// resolve(userCtrl);
			});
		});
	},
);
